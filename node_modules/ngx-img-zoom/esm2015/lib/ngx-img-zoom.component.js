/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2, ElementRef, ViewChild, Input, HostListener } from '@angular/core';
import { NgxImgZoomService } from './ngx-img-zoom.service';
export class NgxImgZoomComponent {
    /**
     * @param {?} renderer
     * @param {?} ngxZoomService
     */
    constructor(renderer, ngxZoomService) {
        this.renderer = renderer;
        this.ngxZoomService = ngxZoomService;
        this.hide = true;
        this._triggerAnimationIn = false;
        this.notFirstTime = false;
        this.showResult = false;
        this.zoomIndex = 0;
        this.zoomMode = this.ngxZoomService.zoomMode;
        this.enableZoom = false;
        this.zoomBreakPoints = this.ngxZoomService.zoomBreakPoints;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set imgStyle(val) {
        this._imgStyle = val;
    }
    /**
     * @return {?}
     */
    get imgStyle() {
        return this._imgStyle;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set resultStyle(val) {
        this._resultStyle = val;
    }
    /**
     * @return {?}
     */
    get resultStyle() {
        return this._resultStyle;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set lensStyle(val) {
        this._lensStyle = val;
        if (this.notFirstTime) {
            this.imageZoom();
        }
    }
    /**
     * @return {?}
     */
    get lensStyle() {
        return this._lensStyle;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onscroll(event) {
        this.hide = true;
        this.renderer.setStyle(this.lens, 'visibility', 'hidden');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onclick(event) {
        this.hide = true;
        this.renderer.setStyle(this.lens, 'visibility', 'hidden');
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set _imgSrc(val) {
        this.zoomImage = val;
        if (this.notFirstTime === true) {
            this.renderer.setStyle(this.result, 'backgroundImage', "url('" + val + "')");
        }
        this.notFirstTime = true;
        // this.renderer.setStyle(this.result, 'backgroundImage', val);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set _zoomImage(val) {
        this.previewImage = val;
        this.showResult = false;
        /** @type {?} */
        const image = new Image();
        image.src = this.zoomImage;
        image.onload = (/**
         * @return {?}
         */
        () => {
            this.showResult = true;
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    handleZoomOutOnMouseWheelUp() {
        if (this.enableZoom) {
            if (this.zoomBreakPoints.length - 1 > this.zoomIndex) {
                this.zoomIndex++;
            }
            this.lensStyle = `height: ${this.zoomBreakPoints[this.zoomIndex].h}px; width: ${this.zoomBreakPoints[this.zoomIndex].w}px;`;
            this.imageZoom();
            this.moveLens(this.lastEventBeforeTheWheel); // Called to keep the position of the lens unchanged.
        }
    }
    /**
     * @return {?}
     */
    handleZoomInOnMouseWheelUp() {
        if (this.enableZoom) {
            if (this.zoomIndex > 0) {
                this.zoomIndex--;
            }
            this.lensStyle = `height: ${this.zoomBreakPoints[this.zoomIndex].h}px; width: ${this.zoomBreakPoints[this.zoomIndex].w}px;`;
            this.imageZoom();
            this.moveLens(this.lastEventBeforeTheWheel); // Called to keep the position of the lens unchanged.
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.img = this.imgElmRef.nativeElement;
        this.result = this.resultElmRef.nativeElement;
        this.container = this.containerElmRef.nativeElement;
        this.renderer.setAttribute(this.img, 'style', (/** @type {?} */ (this.imgStyle)));
        this.renderer.setAttribute(this.result, 'style', (/** @type {?} */ (this.resultStyle)));
        this.renderer.setAttribute(this.container, 'style', (/** @type {?} */ (this.containerStyle)));
        this.imageZoom();
        /*execute a function when someone moves the cursor over the image, or the lens:*/
        this.lensMouseMoveListener = this.renderer.listen(this.lens, 'mousemove', this.moveLens.bind(this));
        this.imgMouseMoveListener = this.renderer.listen(this.img, 'mousemove', this.moveLens.bind(this));
        /*and also for touch screens:*/
        this.imgTouchMoveListener = this.renderer.listen(this.img, 'touchmove', this.moveLens.bind(this));
        this.lensTouchMoveListener = this.renderer.listen(this.lens, 'touchmove', this.moveLens.bind(this));
        this.renderer.setStyle(this.lens, 'visibility', 'hidden');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.lensMouseMoveListener && this.lensMouseMoveListener();
        this.imgMouseMoveListener && this.imgMouseMoveListener();
        this.imgTouchMoveListener && this.imgTouchMoveListener();
        this.lensTouchMoveListener && this.lensTouchMoveListener();
    }
    /**
     * @return {?}
     */
    imageZoom() {
        /*create lens:*/
        if (!this.lens) {
            this.lens = this.renderer.createElement('DIV');
            this.renderer.addClass(this.lens, 'img-zoom-lens');
            // this.renderer.addClass(this.lens, 'cursor-crosshair');
            this.renderer.insertBefore(this.img.parentElement, this.lens, this.img);
        }
        /*insert lens:*/
        this.renderer.setAttribute(this.lens, 'style', (/** @type {?} */ (this.lensStyle)));
        /*calculate the ratio between result DIV and lens:*/
        this.cx = this.result.offsetWidth / this.lens.offsetWidth;
        this.cy = this.result.offsetHeight / this.lens.offsetHeight;
        /*set background properties for the result DIV:*/
        this.renderer.setStyle(this.result, 'backgroundImage', "url('" + this.zoomImage + "')");
        this.renderer.setStyle(this.result, 'backgroundSize', (this.img.width * this.cx) + 'px ' + (this.img.height * this.cy) + 'px');
        // this.renderer.setStyle(this.img.parentElement, 'position', 'relative')
    }
    /**
     * @param {?} e
     * @return {?}
     */
    moveLens(e) {
        this.lastEventBeforeTheWheel = e;
        /** @type {?} */
        let pos;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        /*prevent any other actions that may occur when moving over the image:*/
        e.preventDefault();
        /*get the cursor's x and y positions:*/
        pos = this.getCursorPos(e);
        /*calculate the position of the lens:*/
        x = pos.x - (this.lens.offsetWidth / 2);
        y = pos.y - (this.lens.offsetHeight / 2);
        /*prevent the lens from being positioned outside the image:*/
        if (x > this.img.width - this.lens.offsetWidth) {
            x = this.img.width - this.lens.offsetWidth;
        }
        else if (x < 0) {
            x = 0;
        }
        if (y > this.img.height - this.lens.offsetHeight) {
            y = this.img.height - this.lens.offsetHeight;
        }
        else if (y < 0) {
            y = 0;
        }
        this.hide = false;
        if (this.showResult) {
            this.renderer.setStyle(this.lens, 'left', x + 'px');
            this.renderer.setStyle(this.lens, 'top', y + 'px');
            /*display what the lens 'sees':*/
            this.renderer.setStyle(this.result, 'backgroundPosition', '-' + (x * this.cx) + 'px -' + (y * this.cy) + 'px');
            this.renderer.setStyle(this.lens, 'visibility', 'visible');
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    getCursorPos(e) {
        /** @type {?} */
        let a;
        /** @type {?} */
        let x = 0;
        /** @type {?} */
        let y = 0;
        e = e || window.event;
        /*get the x and y positions of the image:*/
        a = this.img.getBoundingClientRect();
        /*calculate the cursor's x and y coordinates, relative to the image:*/
        x = e.pageX - a.left;
        y = e.pageY - a.top;
        /*consider any page scrolling:*/
        x = x - window.pageXOffset;
        y = y - window.pageYOffset;
        return { x: x, y: y };
    }
    /**
     * @return {?}
     */
    handleMouseLeave() {
        this.hide = true;
        this.renderer.setStyle(this.lens, 'visibility', 'hidden');
    }
}
NgxImgZoomComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-img-zoom',
                template: "\n<div  class=\"img-zoom-container\" #container>\n    <img id=\"myimage\" class='cursor-crosshair' [src]=\"previewImage\" #img (mouseleave)=\"handleMouseLeave()\" \n\tlibMouseWheel (mouseWheelUp)=\"handleZoomInOnMouseWheelUp()\" (mouseWheelDown)=\"handleZoomOutOnMouseWheelUp()\">\n\n    <div [ngClass]=\"{'hide': hide || !showResult}\" \n        id=\"myresult\" \n        class=\"img-zoom-result\" \n        #result>\n    </div>\n</div>  ",
                styles: ["*{box-sizing:border-box}.img-zoom-container{position:absolute}.cursor-crosshair{cursor:crosshair}.img-zoom-lens{pointer-events:none;position:absolute;border:1px solid #d4d4d4;width:40px;height:40px}.img-zoom-result{border:1px solid #d4d4d4;width:300px;height:300px}.hide{visibility:hidden}"]
            }] }
];
/** @nocollapse */
NgxImgZoomComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: NgxImgZoomService }
];
NgxImgZoomComponent.propDecorators = {
    imgElmRef: [{ type: ViewChild, args: ['img', { static: false },] }],
    resultElmRef: [{ type: ViewChild, args: ['result', { static: false },] }],
    containerElmRef: [{ type: ViewChild, args: ['container', { static: false },] }],
    enableZoom: [{ type: Input }],
    imgStyle: [{ type: Input }],
    resultStyle: [{ type: Input }],
    lensStyle: [{ type: Input }],
    containerStyle: [{ type: Input }],
    onscroll: [{ type: HostListener, args: ['window:scroll', ['$event'],] }],
    onclick: [{ type: HostListener, args: ['window:click', ['$event.target'],] }],
    _imgSrc: [{ type: Input, args: ['zoomImageSrc',] }],
    _zoomImage: [{ type: Input, args: ['previewImageSrc',] }]
};
if (false) {
    /** @type {?} */
    NgxImgZoomComponent.prototype.img;
    /** @type {?} */
    NgxImgZoomComponent.prototype.lens;
    /** @type {?} */
    NgxImgZoomComponent.prototype.result;
    /** @type {?} */
    NgxImgZoomComponent.prototype.cx;
    /** @type {?} */
    NgxImgZoomComponent.prototype.cy;
    /** @type {?} */
    NgxImgZoomComponent.prototype.container;
    /** @type {?} */
    NgxImgZoomComponent.prototype.hide;
    /** @type {?} */
    NgxImgZoomComponent.prototype._triggerAnimationIn;
    /** @type {?} */
    NgxImgZoomComponent.prototype.notFirstTime;
    /** @type {?} */
    NgxImgZoomComponent.prototype.showResult;
    /** @type {?} */
    NgxImgZoomComponent.prototype.lastEventBeforeTheWheel;
    /** @type {?} */
    NgxImgZoomComponent.prototype.zoomBreakPoints;
    /** @type {?} */
    NgxImgZoomComponent.prototype.zoomIndex;
    /** @type {?} */
    NgxImgZoomComponent.prototype.lensMouseMoveListener;
    /** @type {?} */
    NgxImgZoomComponent.prototype.imgMouseMoveListener;
    /** @type {?} */
    NgxImgZoomComponent.prototype.imgTouchMoveListener;
    /** @type {?} */
    NgxImgZoomComponent.prototype.lensTouchMoveListener;
    /** @type {?} */
    NgxImgZoomComponent.prototype.zoomMode;
    /** @type {?} */
    NgxImgZoomComponent.prototype.imgElmRef;
    /** @type {?} */
    NgxImgZoomComponent.prototype.resultElmRef;
    /** @type {?} */
    NgxImgZoomComponent.prototype.containerElmRef;
    /** @type {?} */
    NgxImgZoomComponent.prototype.enableZoom;
    /** @type {?} */
    NgxImgZoomComponent.prototype._imgStyle;
    /** @type {?} */
    NgxImgZoomComponent.prototype._resultStyle;
    /** @type {?} */
    NgxImgZoomComponent.prototype._lensStyle;
    /** @type {?} */
    NgxImgZoomComponent.prototype.containerStyle;
    /** @type {?} */
    NgxImgZoomComponent.prototype.zoomImage;
    /** @type {?} */
    NgxImgZoomComponent.prototype.previewImage;
    /**
     * @type {?}
     * @private
     */
    NgxImgZoomComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxImgZoomComponent.prototype.ngxZoomService;
}
//# sourceMappingURL=data:application/json;base64,
{"version":3,"sources":["ng://ngx-img-zoom/lib/ngx-img-zoom.service.ts","ng://ngx-img-zoom/lib/ngx-img-zoom.component.ts","ng://ngx-img-zoom/lib/mouse-wheel.directive.ts","ng://ngx-img-zoom/lib/ngx-img-zoom.module.ts"],"names":["NgxImgZoomService","this","zoomMode","prototype","setZoomBreakPoints","breakPoints","zoomBreakPoints","Injectable","NgxImgZoomComponent","renderer","ngxZoomService","hide","_triggerAnimationIn","notFirstTime","showResult","zoomIndex","enableZoom","Object","defineProperty","_imgStyle","val","_resultStyle","_lensStyle","imageZoom","onscroll","event","setStyle","lens","onclick","zoomImage","result","_this","previewImage","image","Image","src","onload","ngOnInit","handleZoomOutOnMouseWheelUp","length","lensStyle","h","w","moveLens","lastEventBeforeTheWheel","handleZoomInOnMouseWheelUp","ngAfterViewInit","img","imgElmRef","nativeElement","resultElmRef","container","containerElmRef","setAttribute","lensMouseMoveListener","listen","bind","imgMouseMoveListener","imgTouchMoveListener","lensTouchMoveListener","ngOnDestroy","createElement","addClass","insertBefore","parentElement","cx","offsetWidth","cy","offsetHeight","width","height","e","pos","x","y","preventDefault","getCursorPos","a","window","getBoundingClientRect","pageX","left","pageY","top","pageXOffset","pageYOffset","handleMouseLeave","Component","args","selector","template","Renderer2","ViewChild","static","Input","HostListener","MouseWheelDirective","mouseWheelUp","EventEmitter","mouseWheelDown","onMouseWheelChrome","mouseWheelFunc","onMouseWheelFirefox","onMouseWheelIE","events","delta","Math","max","min","wheelDelta","detail","emit","returnValue","Directive","Output","NgxImgZoomModule","NgModule","imports","CommonModule","providers","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { NgxImgZoomMode } from './mode.enum';\n\n@Injectable()\nexport class NgxImgZoomService {\n  zoomMode = NgxImgZoomMode.HoverZoom;\n  zoomBreakPoints;\n  constructor() { }\n\n  // setZoomMode(zoomMode) {\n  //   this.zoomMode = zoomMode;\n  // }\n\n  setZoomBreakPoints(breakPoints) {\n    this.zoomBreakPoints = breakPoints;\n  }\n}\n","import { Component, OnInit, Renderer2, ElementRef, ViewChild, AfterViewInit, Input, HostListener, OnDestroy } from '@angular/core';\nimport { NgxImgZoomService } from './ngx-img-zoom.service';\nimport { NgxImgZoomMode } from './mode.enum';\n@Component({\n  selector: 'ngx-img-zoom',\n  templateUrl: './ngx-img-zoom.component.html',\n  styleUrls: ['./ngx-img-zoom.component.css'],\n})\nexport class NgxImgZoomComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  img; lens; result; cx; cy; container;\n  hide = true;\n  _triggerAnimationIn = false;\n  notFirstTime = false;\n  showResult = false;\n  lastEventBeforeTheWheel;\n  zoomBreakPoints;\n  zoomIndex = 0;\n\n  lensMouseMoveListener;\n  imgMouseMoveListener;\n  imgTouchMoveListener;\n  lensTouchMoveListener;\n  \n  constructor(\n    private renderer: Renderer2,\n    private ngxZoomService: NgxImgZoomService\n    ) {\n      this.zoomBreakPoints = this.ngxZoomService.zoomBreakPoints;\n    }\n\n    zoomMode: NgxImgZoomMode = this.ngxZoomService.zoomMode;\n    @ViewChild('img', { static: false }) imgElmRef: ElementRef;\n    @ViewChild('result', { static: false }) resultElmRef: ElementRef;\n    @ViewChild('container', { static: false }) containerElmRef: ElementRef;\n\n\n    @Input() enableZoom = false;\n    _imgStyle;\n    @Input() set imgStyle(val) {\n      this._imgStyle = val;\n    }\n    get imgStyle() {\n      return this._imgStyle;\n    }\n\n    _resultStyle;\n    @Input() set resultStyle(val) {\n      this._resultStyle = val;\n    }\n    get resultStyle() {\n      return this._resultStyle;\n    }\n\n    _lensStyle;\n    @Input() set lensStyle(val) {\n      this._lensStyle = val;\n      if (this.notFirstTime) {\n        this.imageZoom();\n      }\n    }\n    get lensStyle() {\n      return this._lensStyle;\n    }\n    @Input() containerStyle;\n    zoomImage;\n    previewImage;\n\n  @HostListener('window:scroll', ['$event']) onscroll(event) {\n    this.hide = true;\n    this.renderer.setStyle(this.lens, 'visibility', 'hidden');\n  }\n  @HostListener('window:click', ['$event.target']) onclick(event) {\n    this.hide = true;\n    this.renderer.setStyle(this.lens, 'visibility', 'hidden');\n  }\n\n  @Input('zoomImageSrc') set _imgSrc(val) {\n    this.zoomImage = val;\n    if (this.notFirstTime === true) {\n      this.renderer.setStyle(this.result, 'backgroundImage', \"url('\" + val + \"')\");\n    }\n    this.notFirstTime = true;\n    // this.renderer.setStyle(this.result, 'backgroundImage', val);\n  }\n\n  @Input('previewImageSrc') set _zoomImage(val) {\n    this.previewImage = val;\n    this.showResult = false;\n    const image = new Image();\n    image.src = this.zoomImage;\n    image.onload = () => {\n      this.showResult = true;\n    };\n  }\n\n  ngOnInit() {\n  }\n\n  handleZoomOutOnMouseWheelUp() {\n    if (this.enableZoom) {\n      if (this.zoomBreakPoints.length - 1 > this.zoomIndex) {\n        this.zoomIndex++;\n      }\n      this.lensStyle = `height: ${this.zoomBreakPoints[this.zoomIndex].h}px; width: ${this.zoomBreakPoints[this.zoomIndex].w}px;`;\n      this.imageZoom();\n      this.moveLens(this.lastEventBeforeTheWheel); // Called to keep the position of the lens unchanged.\n    }\n  }\n\n  handleZoomInOnMouseWheelUp() {\n    if (this.enableZoom) {\n      if (this.zoomIndex > 0) {\n        this.zoomIndex--;\n      }\n      this.lensStyle = `height: ${this.zoomBreakPoints[this.zoomIndex].h}px; width: ${this.zoomBreakPoints[this.zoomIndex].w}px;`;\n      this.imageZoom();\n      this.moveLens(this.lastEventBeforeTheWheel); // Called to keep the position of the lens unchanged.\n    }\n  }\n\n  ngAfterViewInit() {\n    this.img = this.imgElmRef.nativeElement;\n    this.result = this.resultElmRef.nativeElement;\n    this.container = this.containerElmRef.nativeElement;\n\n    this.renderer.setAttribute(this.img, 'style', <string>this.imgStyle);\n    this.renderer.setAttribute(this.result, 'style', <string>this.resultStyle);\n    this.renderer.setAttribute(this.container, 'style', <string>this.containerStyle);\n    this.imageZoom();\n    \n    /*execute a function when someone moves the cursor over the image, or the lens:*/\n    this.lensMouseMoveListener = this.renderer.listen(this.lens, 'mousemove', this.moveLens.bind(this));\n    this.imgMouseMoveListener = this.renderer.listen(this.img, 'mousemove', this.moveLens.bind(this));\n\n    /*and also for touch screens:*/\n    this.imgTouchMoveListener = this.renderer.listen(this.img, 'touchmove', this.moveLens.bind(this));\n    this.lensTouchMoveListener = this.renderer.listen(this.lens, 'touchmove', this.moveLens.bind(this));\n\n    this.renderer.setStyle(this.lens, 'visibility', 'hidden');\t\n  }\n\n  ngOnDestroy(){\n    this.lensMouseMoveListener && this.lensMouseMoveListener();\n    this.imgMouseMoveListener && this.imgMouseMoveListener();\n    this.imgTouchMoveListener && this.imgTouchMoveListener();\n    this.lensTouchMoveListener && this.lensTouchMoveListener();\n  }\n\n  imageZoom() {\n    /*create lens:*/\n    if (!this.lens) {\n      this.lens = this.renderer.createElement('DIV');\n      this.renderer.addClass(this.lens, 'img-zoom-lens');\n      // this.renderer.addClass(this.lens, 'cursor-crosshair');\n      this.renderer.insertBefore(this.img.parentElement, this.lens, this.img);\n    }\n\n    /*insert lens:*/\n    this.renderer.setAttribute(this.lens, 'style', <string>this.lensStyle);\n\n    /*calculate the ratio between result DIV and lens:*/\n      this.cx = this.result.offsetWidth / this.lens.offsetWidth;\n      this.cy = this.result.offsetHeight / this.lens.offsetHeight;\n\n    /*set background properties for the result DIV:*/\n    this.renderer.setStyle(this.result, 'backgroundImage', \"url('\" + this.zoomImage + \"')\");\n    this.renderer.setStyle(this.result, 'backgroundSize', (this.img.width * this.cx) + 'px ' + (this.img.height * this.cy) + 'px');\n    // this.renderer.setStyle(this.img.parentElement, 'position', 'relative')\n\n    \n  }\n\n  moveLens(e) {\n    this.lastEventBeforeTheWheel = e;\n      let pos, x, y;\n      /*prevent any other actions that may occur when moving over the image:*/\n      e.preventDefault();\n      /*get the cursor's x and y positions:*/\n      pos = this.getCursorPos(e);\n      /*calculate the position of the lens:*/\n      x = pos.x - (this.lens.offsetWidth / 2);\n      y = pos.y - (this.lens.offsetHeight / 2);\n\n\n      /*prevent the lens from being positioned outside the image:*/\n      if (x > this.img.width - this.lens.offsetWidth) {\n        x = this.img.width - this.lens.offsetWidth;\n      } else if (x < 0) {\n        x = 0;\n      } \n       if (y > this.img.height - this.lens.offsetHeight) {\n        y = this.img.height - this.lens.offsetHeight;\n      } else if (y < 0 ) {\n        y = 0;\n      } \n      this.hide = false;\n      if (this.showResult) {\n        this.renderer.setStyle(this.lens, 'left', x + 'px');\n        this.renderer.setStyle(this.lens, 'top', y + 'px');\n        /*display what the lens 'sees':*/\n        this.renderer.setStyle(this.result, 'backgroundPosition', '-' + (x * this.cx) + 'px -' + (y * this.cy) + 'px');\n        this.renderer.setStyle(this.lens, 'visibility', 'visible');\n      }\n    }\n\n  getCursorPos(e) {\n      let a, x = 0, y = 0;\n      e = e || window.event;\n      /*get the x and y positions of the image:*/\n      a = this.img.getBoundingClientRect();\n      /*calculate the cursor's x and y coordinates, relative to the image:*/\n      x = e.pageX - a.left;\n      y = e.pageY - a.top;\n      /*consider any page scrolling:*/\n      x = x - window.pageXOffset;\n      y = y - window.pageYOffset;\n      return {x : x, y : y};\n  }\n\n  handleMouseLeave() {\n    this.hide = true;\n    this.renderer.setStyle(this.lens, 'visibility', 'hidden');\n  }\n\n}\n","import { Directive, Output, HostListener, EventEmitter } from '@angular/core';\n\n@Directive({\n  selector: '[libMouseWheel]'\n})\nexport class MouseWheelDirective {\n\n  @Output() mouseWheelUp = new EventEmitter();\n  @Output() mouseWheelDown = new EventEmitter();\n\n  @HostListener('mousewheel', ['$event']) onMouseWheelChrome(event: any) {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('DOMMouseScroll', ['$event']) onMouseWheelFirefox(event: any) {\n    this.mouseWheelFunc(event);\n  }\n\n  @HostListener('onmousewheel', ['$event']) onMouseWheelIE(event: any) {\n    this.mouseWheelFunc(event);\n  }\n\n  mouseWheelFunc(events: any) {\n    // tslint:disable-next-line: deprecation\n    const event = window.event || events; // old IE support\n    const delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\n    if (delta > 0) {\n        this.mouseWheelUp.emit(event);\n    } else if (delta < 0) {\n        this.mouseWheelDown.emit(event);\n    }\n    // for IE\n    event.returnValue = false;\n    // for Chrome and Firefox\n    if (event.preventDefault) {\n        event.preventDefault();\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxImgZoomComponent } from './ngx-img-zoom.component';\nimport { CommonModule } from '@angular/common';\nimport { NgxImgZoomService } from './ngx-img-zoom.service';\nimport { MouseWheelDirective } from './mouse-wheel.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [NgxImgZoomService],\n  declarations: [NgxImgZoomComponent, MouseWheelDirective],\n  exports: [NgxImgZoomComponent]\n})\nexport class NgxImgZoomModule { }\n"]}